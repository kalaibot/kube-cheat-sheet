## Adding a testing pod using kubectl and place node selector for those pods
kubectl run testing-pod --image=kalaipm/telnet --namespace=airflow --serviceaccount=airflow --overrides='{"apiVersion": "v1", "spec": {"nodeSelector": { "appgroup": "data" }}}'

## Adding annotations to the pod using kubectl
kubectl run utils-pod --image=kalaipm/utils --namespace=jupyter --overrides='{ "apiVersion": "v1","metadata":{"annotations":{"iam.amazonaws.com/role":"dev-redis"}}}'

## place a pod in default namespace
kubectl run testing-pod --image=kalaipm/curl
kubectl run testing-pod --image=kalaipm/ping
kubectl run testing-pod --image=kalaipm/telnet
kubectl run testing-pod --image=kalaipm/utils

## set an image for the deployment using kubectl from command line
kubectl set image deployment/airflow-web -n=airflow apache/airflow:1.10.11

## Get k8s nodes list from eks/k8's cluster and search for a specific label
kubectl get nodes --show-labels
kubectl get nodes --show-labels | grep appgroup
kubectl get pods -l role=frontend,environment=staging
kubectl get pods -l app=frontend,pod-template-hash=5cdfff87f9
kubectl get pods -l 'app in (frontend, rails, rails-consumer)'
kubectl get pods -l 'role in (frontend, backend),environment in (production)'
kubectl get pods -l 'role in (frontend, backend),environment notin (production)'
kubectl get pods  -l 'app!=frontend'
kubectl label pod nginx app=nginx-application
kubectl label --overwrite pod nginx app=nginx-application


# Look for pod logs
kubectl logs --since=1h nginx
kubectl logs -f rails -c nginx
kubectl logs --tail=20 nginx

# kubectl scale replicas
kubectl scale --replicas=3 deployment/flux -n=flux
kubectl scale --current-replicas=2 --replicas=3 deployment/flux

# kubectl delete pods forcefully
kubectl delete pod <pod_name> -n <namespace> --grace-period 0 --force

# get pods using selector labels
kubectl get nodes --selector=appgroup!=data
kubectl top nodes --selector=appgroup=data
